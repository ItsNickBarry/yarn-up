#!/usr/bin/env node
'use strict';
const path = require('path');
const child_process = require('child_process');
const stream = require('stream');
const os = require('os');             const {resolve:p}=path;const {spawn:q}=child_process;const {Writable:r}=stream;const t=(b,a=0,c=!1)=>{if(0===a&&!c)return b;b=b.split("\n",c?a+1:void 0);return c?b[b.length-1]:b.slice(a).join("\n")},u=(b,a=!1)=>t(b,2+(a?1:0)),v=b=>{({callee:{caller:b}}=b);return b};const {homedir:w}=os;const x=/\s+at.*(?:\(|\s)(.*)\)?/,z=/^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:IGNORED_MODULES)\/.*)?\w+)\.js:\d+:\d+)|native)/,A=w(),B=b=>{const {pretty:a=!1,ignoredModules:c=["pirates"]}={},f=c.join("|"),d=new RegExp(z.source.replace("IGNORED_MODULES",f));return b.replace(/\\/g,"/").split("\n").filter(e=>{e=e.match(x);if(null===e||!e[1])return!0;e=e[1];return e.includes(".app/Contents/Resources/electron.asar")||e.includes(".app/Contents/Resources/default_app.asar")?!1:!d.test(e)}).filter(e=>
e.trim()).map(e=>a?e.replace(x,(g,h)=>g.replace(h,h.replace(A,"~"))):e).join("\n")};function C(b,a,c=!1){return function(f){var d=v(arguments),{stack:e}=Error();const g=t(e,2,!0),h=(e=f instanceof Error)?f.message:f;d=[`Error: ${h}`,...null!==d&&b===d||c?[a]:[g,a]].join("\n");d=B(d);return Object.assign(e?f:Error(),{message:h,stack:d})}};function D(b){var {stack:a}=Error();const c=v(arguments);a=u(a,b);return C(c,a,b)};const E=(b,a)=>{a.once("error",c=>{b.emit("error",c)});return a};class F extends r{constructor(b){var a=b||{},c=Object.assign({},a);const f=void 0===a.binary?!1:a.binary,d=void 0===a.rs?null:a.rs;a=(delete c.binary,delete c.rs,c);const {f:e=D(!0),proxyError:g}=b||{},h=(l,m)=>e(m);super(a);this.b=[];this.c=new Promise((l,m)=>{this.on("finish",()=>{let k;f?k=Buffer.concat(this.b):k=this.b.join("");l(k);this.b=[]});this.once("error",k=>{if(-1==k.stack.indexOf("\n"))h`${k}`;else{const n=B(k.stack);k.stack=n;g&&h`${k}`}m(k)});d&&E(this,d).pipe(this)})}_write(b,a,c){this.b.push(b);
c()}get promise(){return this.c}}const G=async b=>{var a=void 0===a?{}:a;({promise:b}=new F(Object.assign({},{rs:b},a,{f:D(!0)})));return await b};const H=async b=>{const [a,c,f]=await Promise.all([new Promise((d,e)=>{b.on("error",e).on("exit",g=>{d(g)})}),b.stdout?G(b.stdout):void 0,b.stderr?G(b.stderr):void 0]);return{code:a,stdout:c,stderr:f}};const I=(b,a,c,f,d)=>{f=void 0===f?!1:f;d=void 0===d?!1:d;const e=c?new RegExp(`^-(${c}|-${a})`):new RegExp(`^--${a}`);a=b.findIndex(g=>e.test(g));if(-1==a)return{argv:b};if(f)return{value:!0,argv:[...b.slice(0,a),...b.slice(a+1)]};f=a+1;c=b[f];if(!c||"string"==typeof c&&c.startsWith("--"))return{argv:b};d&&(c=parseInt(c,10));return{value:c,argv:[...b.slice(0,a),...b.slice(f+1)]}},J=b=>{const a=[];for(let c=0;c<b.length;c++){const f=b[c];if(f.startsWith("-"))break;a.push(f)}return a};const K=function(b,a){b=void 0===b?{}:b;a=void 0===a?process.argv:a;[,,...a]=a;const c=J(a);a=a.slice(c.length);let f=!c.length;return Object.keys(b).reduce((d,e)=>{var g=Object.assign({},d);d=d.a;g=(delete g.a,g);if(0==d.length&&f)return Object.assign({},{a:d},g);const h=b[e];let l;if("string"==typeof h)({value:l,argv:d}=I(d,e,h));else try{const {short:m,boolean:k,number:n,command:y,multiple:N}=h;y&&N&&c.length?(l=c,f=!0):y&&c.length?(l=c[0],f=!0):{value:l,argv:d}=I(d,e,m,k,n)}catch(m){return Object.assign({},
{a:d},g)}return void 0===l?Object.assign({},{a:d},g):Object.assign({},{a:d},g,{[e]:l})},{a})}({exclude:{description:"Comma-separated packages to exclude.",short:"e"},upgrade:{description:"Run `yarn upgrade` after the update.",boolean:!0,short:"u"}}),L=K.exclude,M=K.upgrade;async function O(){var b=P,a=L?L.split(","):void 0;a=void 0===a?[]:a;if(null===b||void 0===b)throw Error("Package.json content is not given");const {devDependencies:c,dependencies:f}=b,d=Object.assign({},c,f);b=Object.keys(d).filter(h=>!a.includes(h));const [e,g]=b.reduce((h,l)=>{var [m,k]=h;/^\d/.test(d[l])?m.push(l):k.push(l);return[m,k]},[[],[]]);e.length&&await Q(e,!0);g.length&&await Q(g)}
const Q=async(b,a)=>{a=void 0===a?!1:a;const c=["upgrade",...b.map(f=>`${f}@latest`),...a?["-E"]:[]];process.stdout.write(["yarn",...c,"\n"].join(" "));await new Promise((f,d)=>{const e=q("yarn",c,{stdio:"inherit"});e.on("close",()=>{f()});e.on("error",g=>{d(g)})})};const P=require(p(process.cwd(),"package.json"));(async()=>{try{if(await O(),M){{const a=q("yarn",["upgrade"],void 0),c=H(a);a.promise=c;a.spawnCommand=a.spawnargs.join(" ");var b=a}await b.promise}}catch(a){console.log(a)}})();

//# sourceMappingURL=yarn-up.js.map
#!/usr/bin/env node
'use strict';
const path = require('path');
const child_process = require('child_process');             const {resolve:n}=path;const {spawn:p}=child_process;const r=(b,a,c,e,d)=>{e=void 0===e?!1:e;d=void 0===d?!1:d;const g=c?new RegExp(`^-(${c}|-${a})`):new RegExp(`^--${a}`);a=b.findIndex(f=>g.test(f));if(-1==a)return{argv:b};if(e)return{value:!0,argv:[...b.slice(0,a),...b.slice(a+1)]};e=a+1;c=b[e];if(!c||"string"==typeof c&&c.startsWith("--"))return{argv:b};d&&(c=parseInt(c,10));return{value:c,argv:[...b.slice(0,a),...b.slice(e+1)]}},t=b=>{const a=[];for(let c=0;c<b.length;c++){const e=b[c];if(e.startsWith("-"))break;a.push(e)}return a};const u=function(b,a){b=void 0===b?{}:b;a=void 0===a?process.argv:a;[,,...a]=a;const c=t(a);a=a.slice(c.length);let e=!c.length;return Object.keys(b).reduce((d,g)=>{var f=Object.assign({},d);d=d.a;f=(delete f.a,f);if(0==d.length&&e)return Object.assign({},{a:d},f);const k=b[g];let h;if("string"==typeof k)({value:h,argv:d}=r(d,g,k));else try{const {short:l,boolean:m,number:x,command:q,multiple:y}=k;q&&y&&c.length?(h=c,e=!0):q&&c.length?(h=c[0],e=!0):{value:h,argv:d}=r(d,g,l,m,x)}catch(l){return Object.assign({},
{a:d},f)}return void 0===h?Object.assign({},{a:d},f):Object.assign({},{a:d},f,{[g]:h})},{a})}({exclude:{description:"Comma-separated packages to exclude.",short:"e"},upgrade:{description:"Run `yarn upgrade` after the update.",boolean:!0,short:"u"}}),v=u.exclude,w=u.upgrade;async function z(){var b=A,a=v?v.split(","):void 0;a=void 0===a?[]:a;if(null===b||void 0===b)throw Error("Package.json content is not given");const {devDependencies:c,dependencies:e}=b,d=Object.assign({},c,e);b=Object.keys(d).filter(k=>!a.includes(k));const [g,f]=b.reduce((k,h)=>{var [l,m]=k;/^\d/.test(d[h])?l.push(h):m.push(h);return[l,m]},[[],[]]);g.length&&await B(g,!0);f.length&&await B(f)}
const B=async(b,a)=>{a=void 0===a?!1:a;const c=["upgrade",...b.map(e=>`${e}@latest`),...a?["-E"]:[]];process.stdout.write(["yarn",...c,"\n"].join(" "));await new Promise((e,d)=>{const g=p("yarn",c,{stdio:"inherit"});g.on("close",()=>{e()});g.on("error",f=>{d(f)})})};const A=require(n(process.cwd(),"package.json"));(async()=>{try{await z(),w&&p("yarn",["upgrade"])}catch(b){console.log(b)}})();

//# sourceMappingURL=yarn-up.js.map